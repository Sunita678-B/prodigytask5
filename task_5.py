# -*- coding: utf-8 -*-
"""task 5

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JzPQJGrKYYIHVoToQHO8VhhzArKzfTKj
"""

pip install tensorflow pillow matplotlib

import tensorflow as tf
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt

def load_img(path_to_img):
    max_dim = 512
    img = Image.open(path_to_img)
    long = max(img.size)
    scale = max_dim / long
    img = img.resize((round(img.size[0]*scale), round(img.size[1]*scale)))
    img = np.array(img)
    img = np.expand_dims(img, axis=0)
    return img

def preprocess_image(image):
    image = tf.convert_to_tensor(image, dtype=tf.float32)
    image = tf.image.convert_image_dtype(image, tf.float32)
    return image

vgg = tf.keras.applications.VGG19(include_top=False, weights='imagenet')

content_layers = ['block5_conv2']  # Content layer
style_layers = ['block1_conv1', 'block2_conv1', 'block3_conv1', 'block4_conv1', 'block5_conv1']  # Style layers

plt.imshow(generated_image)
plt.show()

import tensorflow as tf
import tensorflow_hub as hub
import matplotlib.pyplot as plt
from PIL import Image
import numpy as np

# Function to load and preprocess image
def load_image(path, image_size=(512, 512)):
    img = Image.open(path).resize(511)
    img = np.array(img) / 255.0
    img = img.astype(np.float32)
    img = np.expand_dims(img, axis=0)
    return img

# Load content and style images
content_image = load_image("!wget https://images.pexels.com/photos/417173/pexels-photo-417173.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=512&w=512")
style_image = load_image('!wget https://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg/640px-Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg -O style.jpg')

# Load pre-trained style transfer model from TensorFlow Hub
hub_model = hub.load('https://tfhub.dev/google/magenta/arbitrary-image-stylization-v1-256/2')

# Generate stylized image
stylized_image = hub_model(tf.constant(content_image), tf.constant(style_image))[0]

# Display the result
plt.imshow(tf.squeeze(stylized_image))  # Remove batch dimension
plt.axis('off')
plt.show()